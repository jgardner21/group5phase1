swagger: "2.0"
info:
  title: Module Registry API
  description: API for managing package uploads, updates, ratings, and downloads
  version: 1.0.0
host: ec2-18-222-159-163.us-east-2.compute.amazonaws.com
basePath: /
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
paths:
  /package:
    post:
      summary: Upload or Ingest a new package. (BASELINE)
      description: |
        Upload or Ingest a new package. Packages that are uploaded may have the same name but a new version.
      parameters:
        - in: body
          name: body
          description: Package data to be uploaded
          required: true
          schema:
            $ref: '#/definitions/PackageData'
      responses:
        201:
          description: Success. Check the ID in the returned metadata for the official ID.
        400:
          description: There is missing field(s) in the PackageData/AuthenticationToken or it is formed improperly.
        409:
          description: Package exists already.
        424:
          description: Package is not uploaded due to the disqualified rating.
  /package/{id}:
    get:
      tags:
        - package
      summary: Interact with the package with this ID. (BASELINE)
      description: Return this package.
      operationId: PackageRetrieve
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: ID of package to fetch
          type: string
      responses:
        200:
          description: Return the package. Content is required.
          schema:
            $ref: '#/definitions/Package'
          examples:
            application/json:
              metadata:
                Name: "Underscore"
                Version: "1.0.0"
                ID: "underscore"
              data:
                Content: "<Base64_encoded_content>"
                URL: "https://github.com/jashkenas/underscore"
                JSProgram: |
                  if (process.argv.length === 7) {
                    console.log('Success')
                    process.exit(0)
                  } else {
                    console.log('Failed')
                    process.exit(1)
                  }
        404:
          description: Package does not exist.
    put:
      summary: Update the content of the package. (BASELINE)
      description: |
        The name, version, and ID must match.
        The package contents (from PackageData) will replace the previous contents.
      parameters:
        - name: id
          in: path
          required: true
          type: string
          description: "Unique ID of the package to update."
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Package'
      responses:
        '200':
          description: Version is updated.
        '404':
          description: Package does not exist.
      operationId: PackageUpdate
  /package/{id}/rate:
    get:
      summary: Rate a package
      description: Rate a package based on a provided filename.
      parameters:
        - in: body
          name: body
          description: Object containing the filename to rate.
          required: true
          schema:
            type: object
            properties:
              filename:
                type: string
                description: The name of the file containing package information.
      responses:
        200:
          description: Packages rated successfully. The output is a JSON array of the packages' scores.
          schema:
            type: array
            items:
              type: object
              properties:
                URL:
                  type: string
                  description: The GitHub URL of the package.
                NET_SCORE:
                  type: number
                  description: The net score of the package.
                RAMP_UP_SCORE:
                  type: number
                  description: The ramp-up score of the package.
                CORRECTNESS_SCORE:
                  type: number
                  description: The correctness score of the package.
                BUS_FACTOR_SCORE:
                  type: number
                  description: The bus-factor score of the package.
                RESPONSIVE_MAINTAINER_SCORE:
                  type: number
                  description: The responsive maintainer score of the package.
                LICENSE_SCORE:
                  type: number
                  description: The license score of the package.
        400:
          description: Invalid input.
        404:
          description: Package does not exist.
        500:
          description: Internal server error or error in processing the request.

definitions:
  Package:
    required:
      - metadata
      - data
    type: object
    properties:
      metadata:
        $ref: '#/definitions/PackageMetadata'
        description: ""
      data:
        $ref: '#/definitions/PackageData'
        description: ""
  PackageMetadata:
    description: |-
      The "Name" and "Version" are used as a unique identifier pair when uploading a package.
      
      The "ID" is used as an internal identifier for interacting with existing packages.
    required:
      - Name
      - Version
      - ID
    type: object
    properties:
      Name:
        $ref: '#/definitions/PackageName'
        description: Package name
        example: my-package
      Version:
        description: Package version
        type: string
        example: 1.2.3
      ID:
        $ref: '#/definitions/PackageID'
        description: "Unique ID for use with the /package/{id} endpoint."
        example: "123567192081501"
  PackageData:
    description: |-
      This is a "union" type.
      - On package upload, either Content or URL should be set. If both are set, returns 400.
      - On package update, exactly one field should be set.
      - On download, the Content field should be set.
    type: object
    properties:
      Content:
        description: |-
          Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).
          
          This will be a zipped version of an npm package's GitHub repository, minus the ".git/" directory." It will, for example, include the "package.json" file that can be used to retrieve the project homepage.
          
          See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.
        type: string
      URL:
        description: Package URL (for use in public ingest).
        type: string
      JSProgram:
        description: A JavaScript program (for use with sensitive modules).
        type: string
  User:
    description: ""
    required:
      - name
      - isAdmin
    type: object
    properties:
      name:
        description: ""
        type: string
        example: Alfalfa
      isAdmin:
        description: Is this user an admin?
        type: boolean
  UserAuthenticationInfo:
    description: Authentication info for a user
    required:
      - password
    type: object
    properties:
      password:
        description: "Password for a user. Per the spec, this should be a \"strong\"\
            \ password."
        type: string
  PackageID:
    description: ""
    type: string
  PackageRating:
    description: |-
      Package rating (cf. Project 1).
      
      If the Project 1 that you inherited does not support one or more of the original properties, denote this with the value "-1".
    required:
      - RampUp
      - Correctness
      - BusFactor
      - ResponsiveMaintainer
      - LicenseScore
      - GoodPinningPractice
      - PullRequest
      - NetScore
    type: object
    properties:
      BusFactor:
        format: double
        description: ""
        type: number
      Correctness:
        format: double
        description: ""
        type: number
      RampUp:
        format: double
        description: ""
        type: number
      ResponsiveMaintainer:
        format: double
        description: ""
        type: number
      LicenseScore:
        format: double
        description: ""
        type: number
      GoodPinningPractice:
        format: double
        description: "The fraction of its dependencies that are pinned to at least\
            \ a specific major+minor version, e.g. version 2.3.X of a package. (If\
            \ there are zero dependencies, they should receive a 1.0 rating. If there\
            \ are two dependencies, one pinned to this degree, then they should receive\
            \ a Â½ = 0.5 rating)."
        type: number
      PullRequest:
        format: double
        description: The fraction of project code that was introduced through pull
          requests with a code review.
        type: number
      NetScore:
        format: double
        description: Scores calculated from other seven metrics.
        type: number
  PackageHistoryEntry:
    description: One entry of the history of this package.
    required:
      - User
      - Date
      - PackageMetadata
      - Action
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
        description: ""
      Date:
        format: date-time
        description: Date of activity using ISO-8601 Datetime standard in UTC format.
        type: string
        example: 2023-03-23T23:11:15Z
      PackageMetadata:
        $ref: '#/definitions/PackageMetadata'
        description: ""
      Action:
        description: ""
        enum:
          - CREATE
          - UPDATE
          - DOWNLOAD
          - RATE
        type: string
  PackageName:
    description: |-
      Name of a package.
      
      - Names should only use typical "keyboard" characters.
      - The name "*" is reserved. See the `/packages` API for its meaning.
    type: string
  AuthenticationToken:
    description: "The spec permits you to use any token format you like. You could,\
        \ for example, look into JSON Web Tokens (\"JWT\", pronounced \"jots\"): https://jwt.io."
    type: string
  AuthenticationRequest:
    description: ""
    required:
      - User
      - Secret
    type: object
    properties:
      User:
        $ref: '#/definitions/User'
        description: ""
      Secret:
        $ref: '#/definitions/UserAuthenticationInfo'
        description: ""
  SemverRange:
    description: ""
    type: string
    example: |-
      Exact (1.2.3)
      Bounded range (1.2.3-2.1.0)
      Carat (^1.2.3)
      Tilde (~1.2.0)
  PackageQuery:
    description: ""
    required:
      - Name
    type: object
    properties:
      Version:
        $ref: '#/definitions/SemverRange'
        description: ""
      Name:
        $ref: '#/definitions/PackageName'
        description: ""
  EnumerateOffset:
    description: Offset in pagination.
    type: string
    example: "1"
  PackageRegEx:
    description: ""
    required:
      - RegEx
    type: object
    properties:
      RegEx:
        description: A regular expression over package names and READMEs that is
          used for searching for a package
        type: string